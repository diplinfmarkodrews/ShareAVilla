@model ShareAVilla.Models.RoomRequest.ReservationsVM

<style type="text/css">
    .label {
        font-size: 8px;
        font-style: oblique;
        width: 60px;
    }
</style>

 <table class="table-striped">
    <tr>
        <th>
            @Html.Label("Room Description:", htmlAttributes: new { @class = "labellogin" })

        </th>
        <th>

         @Html.Label(Model.Start.ToShortDateString(), htmlAttributes: new { @class = "label" })
            
        </th>
        @for (int i = 0; i < Model.Duration.Days - 2; i++)
        {

            <th>
                @Html.Label(Model.Start.AddDays(i + 1).ToString("dd."), htmlAttributes: new { @class = "labellogin" })
            </th>

        }

        <th>
            @Html.Label("End: " + Model.End.ToString("dd.MM."), htmlAttributes: new { @class = "labellogin" })
        </th>

    </tr>
    @foreach (var room in Model.BedRooms)
    {
     
        <tr>
            <td>
                <div class="form-group">
                    @Html.Label("Room#:", htmlAttributes: new { @class = "labellogin" })
                    @Html.DisplayFor(model => room.RoomNumber)
                </div>
                <div class="form-group">
                    @Html.Label("Type:", htmlAttributes: new { @class = "labellogin" })
                    @Html.DisplayFor(model => room.roomType, new { @class = "labellogin" })
                </div>
                <div class="form-group">
                    @Html.Label("DoubleBeds:", htmlAttributes: new { @class = "labellogin" })
                    @Html.DisplayFor(model => room.DoubleBeds)
                </div>
                <div class="form-group">
                    @Html.Label("SingleBeds:", htmlAttributes: new { @class = "labellogin" })
                    @Html.DisplayFor(model => room.SingleBeds)
                </div>
                <div class="form-group">
                    @Html.Label("Share:", htmlAttributes: new { @class = "labellogin" })
                    @Html.DisplayFor(model => room.SharePossible)
                </div>
            </td>
           @{
               bool occupied = false;
               ShareAVilla.Models.RoomRequest.RoomRequestVMOwner tmpRoomRq = new ShareAVilla.Models.RoomRequest.RoomRequestVMOwner();
               TimeSpan bookingTime = new TimeSpan();
               foreach (var res in Model.Reservations)
               {

                   if (res.RoomID == room.ID)
                   {
                       tmpRoomRq = res;
                       bookingTime = tmpRoomRq.CheckOut - tmpRoomRq.CheckIn;
                       occupied = true;
                   }
               }

               for (int i = 0; i < Model.Duration.Days; i++)
               {

                   if (occupied)
                   {
                       if (tmpRoomRq.CheckIn <= Model.Start.AddDays(i))
                       {
                           if (tmpRoomRq.CheckOut > Model.Start.AddDays( i))
                           {
                                <td>
                                    <span class="glyphicons glyphicons-ok-sign" height="42" width="42">X</span>
                                </td>
                           }
                       }
               }
                else
                {
                <td>
                    @*<span class="glyphicons glyphicon-star-empty" height="42" width="42">-</span>*@
                    @Html.Raw("-")
                </td>
                    }





                   }
               }
        </tr>
    }
    </table>



@*  room description
    
    @foreach (var room in Model.BedRooms)
    {
        <hr />
        <div class="form-group">
            @Html.Raw("Room#")
            @Html.DisplayFor(model => room.RoomNumber)
        </div>
        <div class="form-group">
            @Html.Raw("Type")
            @Html.DisplayFor(model => room.roomType)
        </div>
        <div class="form-group">
            @Html.Raw("DoubleBeds")
            @Html.DisplayFor(model => room.DoubleBeds)
        </div>
        <div class="form-group">
            @Html.Raw("SingleBeds")
            @Html.DisplayFor(model => room.SingleBeds)
        </div>
        <div class="form-group">
            @Html.Raw("Share")
            @Html.DisplayFor(model => room.SharePossible)
        </div>
    }
*@

<style>

    .cd-schedule .events .events-group > ul {
        position: relative;
        padding: 0 5%;
        /* force its children to stay on one line */
        display: flex;
        overflow-x: scroll;
        -webkit-overflow-scrolling: touch;
    }

    .cd-schedule .events .single-event {
        /* force them to stay on one line */
        flex-shrink: 0;
        float: left;
        height: 150px;
        width: 70%;
        max-width: 300px;
    }
    .cd-schedule .event-modal {
        position: fixed;
        z-index: 3;
        top: 0;
        right: 0;
        height: 100%;
        width: 100%;
        visibility: hidden;
        transform: translateX(100%);
        transition: transform .4s, visibility .4s;
    }

    .cd-schedule.modal-is-open .event-modal {
        /* .modal-is-open class is added as soon as an event is selected */
        transform: translateX(0);
        visibility: visible;
    }
   
  .cd-schedule .events {
    float: left;
    width: 100%;
  }
  .cd-schedule .events .events-group {
    width: 20%;
    float: left;
  }
  .cd-schedule .events .single-event {
    position: absolute;
    z-index: 3;
    /* top position and height will be set using js */
    width: calc(100% + 2px);
    left: -1px;
  }
</style>