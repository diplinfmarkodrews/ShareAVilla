@model ShareAVilla.Models.Find.SearchVM
@using Newtonsoft.Json.Linq;
@using System.Web.Helpers;
@using System.Web.Script.Serialization;

@{ 
    
    System.Globalization.CultureInfo customCulture = (System.Globalization.CultureInfo)System.Threading.Thread.CurrentThread.CurrentCulture.Clone();
    customCulture.NumberFormat.NumberDecimalSeparator = ".";

    System.Threading.Thread.CurrentThread.CurrentCulture = customCulture;

}


<div id="map_canvas" style="height: 550px;"></div>
@*<script type="text/javascript" charset="utf-8" 
        src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"></script>*@
    <script type="text/javascript" charset="utf-8" 
        src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>
    <script type="text/javascript" charset="utf-8" 
        src="http://maps.google.com/maps/api/js?key=AIzaSyAbTSqdMgDSeNsuy4B9jDGXdnKh2NWyaI4&sensor=false"></script>
    <script type="text/javascript">
    $(document).ready(function () {

        Initialize();
        google.maps.event.addDomListener(window, 'load', Initialize, Modernizr.passiveeventlisteners ? { passive: true } : false);
    });
    function LoadLikibuResults(means, map) {

        ///in Razor function to access modelitems with loop index
        @for (int i = 0; i < Model.LikibuResults.Offers.Count; i++)
            {

                @:var lat = '@Html.Raw(Model.LikibuResults.Offers.ElementAt(i).Lat.ToString())';
                @:var lng = '@Html.Raw(Model.LikibuResults.Offers.ElementAt(i).Lng.ToString())';
                @:var marker = new google.maps.Marker({
                @:position: new google.maps.LatLng(lat, lng),
                @:map: map,
                @:title: '@Html.Raw(Model.LikibuResults.Offers.ElementAt(i).Title.ToString())'
                @:});
                @:marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');
                @:var infowindow = new google.maps.InfoWindow({
                @:content: "<div class='infoDiv'><h4> Likibu-Offer" +
                @: "</h4>" + "<div><h5> " + marker.title +
                @: "</h5></div></div>"
                @:});
                @*@:google.maps.event.addListener(marker, 'click', function () {
                @:infowindow.open(map, marker);
                @:});*@
                @:var flat = parseFloat(lat);
                @:var flng = parseFloat(lng);
                @:if (flat == 0.0 && flng == 0.0) { means[2]++;}
                @:means[0] = means[0] + flat;
                @:means[1] = means[1] + flng;


            }

            return means;
        }

            function LoadRequestResults(means, map){


                 @for (int i = 0; i < Model.RequestResults.RequestList.Count; i++)
                 {
                    @:var lat = '@Html.Raw(Model.RequestResults.RequestList.ElementAt(i).Lat.ToString())';
                    @:var lng = '@Html.Raw(Model.RequestResults.RequestList.ElementAt(i).Lng.ToString())';
                    
                    @:var marker = new google.maps.Marker({
                    @:position: new google.maps.LatLng(lat, lng),
                    @:map: map,
                    @:title: '@Html.Raw(Model.RequestResults.RequestList.ElementAt(i).Title)'
                    @:});
                    @:marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');
                    @:var infowindow = new google.maps.InfoWindow({
                    @:content: "<div class='infoDiv'><h2> Request" +
                    @: "</h2>" + "<div><h4> " + marker.title +
                    @: "</h4></div></div>"
                    @:});
                    @*@:google.maps.event.addListener(marker, 'click', function () {
                    @:infowindow.open(map, marker);
                    @:});*@
                    @:var flat = parseFloat(lat);
                    @:var flng = parseFloat(lng);
                    @:if (flat == 0.0 && flng == 0.0) { means[2]++;}
                    @:means[0] = means[0] + flat;
                    @:means[1] = means[1] + flng;
                     //LatMean = LatMean + Model.LikibuResults.Offers.ElementAt(i).Lat;
                     //LngMean = LngMean + Model.LikibuResults.Offers.ElementAt(i).Lng;
                 }

            return means;

        }
        function InitMap() {

            var mapOptions = {
                zoom: 10,
                center: new google.maps.LatLng(1.0, 1.0), /*origin,*/
                mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
            };
            var map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);
            google.maps.visualRefresh = true;
            return map;
        }
        function LikiHasResults()
        {

            if ('@Model.LikibuResults.Offers.Count'>0)
            {
                return true;
            }
            return false;
        }
        function RequestHasResults()
        {
             if ('@Model.RequestResults.RequestList.Count'>0)
            {
                return true;
            }
            return false;
        }
        function Initialize() {
            var likiRes = '@Model.LikibuResults.Offers';
            
            if (likiRes!= null )
            {

                var map = InitMap();
                var meanlat = 0.0;
                var meanlng = 0.0;
                var zeros = 0.0;
                var means = new Array(meanlat, meanlng, zeros); 
                var countLiki = 0;
                var countRequests = 0;
                if (LikiHasResults())
                {

                    means = LoadLikibuResults(means, map);
                    countLiki = '@Model.LikibuResults.Offers.Count';
                }                
                if (RequestHasResults())
                {
                    means = LoadRequestResults(means, map);
                    countRequests = '@Model.RequestResults.RequestList.Count';
                }               
                countLiki = parseInt(countLiki);
                countRequests = parseInt(countRequests);
                meanlat = means[0] / (countLiki + countRequests - means[2] );
                meanlng = means[1] / (countLiki + countRequests - means[2] );
                //console.log("meanLat: " + meanlat + "; meanLng: " + meanlng + "; elems: " + (countLiki + countRequests - means[2]));
                var origin = new google.maps.LatLng(meanlat, meanlng);
                map.setCenter(origin);
            }
        }

</script>


<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>

